#|Andrés Sebastián Arteaga Cabezas
Ejercicio 28 Tema 3: Inducción de Conceptos Umbral|#

(#%require racket)
(include "take.rkt")
(include "T2Ejercicio4.rkt")
(include "T2Ejercicio8.rkt")
(include "T3Ejercicio22.rkt")
(include "T3Ejercicio27.rkt")

(define (ord-por-score PSET NSET conceptos)
  (let*((conceptos (remove-duplicates conceptos))
        (sc (map (lambda(x)
                   (score-TC x PSET NSET))
                 conceptos))
        (lissc (map (lambda (x y) (append (list x) (list y)))
                    conceptos sc))
        (d '()))
    (for-each (lambda (x)
            (for-each (lambda (y)
                        (if(equal? x (cadr y))
                           (set! d (append d (list(car y))))
                           'null))
                      lissc))
          (sort sc >))
    d))

(define (cmp-concepto-TC CTC1 CTC2)
  (if(= (car CTC1) (car CTC2)) (cmp-concepto-CL (cdr CTC1) (cdr CTC2))
     (let*((cmp (+ (car CTC2)
                   (* -1 (car CTC1))
                   (apply + (map (lambda (x)
                                   (cmp-concepto-CL (car x) (cadr x)))
                                 (map (lambda (x y)
                                        (list (list x) (list y)))
                                      (cdr CTC1) (cdr CTC2)))))))
       (cond
         ((negative? cmp) -1)
         ((zero? cmp) 0)
         (else 1)))))

(define (HTC0 PSET NSET CSET HSET)
  (let*((CSET CSET)
        (OSET '()))
    (let*((meta (car PSET))
          (PSET (cons meta (tomar 100 (shuffle (cdr PSET)))))
          (NSET (cons meta (tomar 100 (shuffle (cdr NSET))))))
      (for-each (lambda (x)
                  (let*((new '()))
                    (for-each (lambda (c)
                                (when (> (score-TC c PSET NSET)
                                         (score-TC x PSET NSET))
                                  (set! new (append new (list c)))))
                              (let*((S '()))
                                (map (lambda (h) (let*((Slocal (especializaciones-TC x meta h)))
                                                   (set! S (append S Slocal))))
                                     (cdr NSET))
                                (remove-duplicates(remove* x (tomar 100 (shuffle S))))))
                    (if(empty? new) (set! CSET (append CSET (list x)))
                       (for-each (lambda (c)
                                   (and (set! OSET (append OSET (list c)))
                                        (for-each (lambda (v)
                                                    (when(< (cmp-concepto-TC c v) 0)
                                                      (if(> (score-TC v PSET NSET)
                                                            (score-TC c PSET NSET))
                                                         (set! OSET (remove (list v) OSET))
                                                         (set! CSET (remove (list c) CSET)))))
                                                  CSET)))
                                 new))))
                HSET))
    (if(empty? OSET)
       (let*((resultado (ord-por-score PSET NSET CSET)))
         (car (reverse resultado)))
       (let*((mejorSET (tomar 10 (ord-por-score PSET NSET (append CSET OSET))))
             (CLOSED-SET (let((a '()))
                           (for-each (lambda (x)
                                       (for-each (lambda (y)
                                                   (if(equal? x y)
                                                      (set! a (append a (list x)))
                                                      'null))
                                                 CSET))
                                     mejorSET)
                           a))
             (OPEN-SET (let((a '()))
                         (for-each (lambda (x)
                                     (for-each (lambda (y)
                                                 (if(equal? x y)
                                                    (set! a (append a (list x)))
                                                    'null))
                                               OSET))
                                   mejorSET)
                         a)))
         (HTC0 PSET NSET CLOSED-SET OPEN-SET)))))

(define (HTC ejemplos)
  (let*((meta (car ejemplos))
        (ejPositivo (remove* '(null)
                             (map (lambda (x)
                                    (if(equal? '+ (car(reverse x)))
                                       x 'null))
                                  (cdr ejemplos))))
        (ejNegativo (remove* '(null)
                             (map (lambda (x)
                                    (if(equal? '- (car(reverse x)))
                                       x 'null))
                                  (cdr ejemplos))))
        (CTC-mas-general (cons 0 (concepto-CL-mas-general meta)))
        (apli (HTC0 (cons meta ejPositivo) (cons meta ejNegativo) '() (list CTC-mas-general)))
        )
    apli))

;;Ejecución
;;=================================================================
;(include "Ejercicio8.rkt")
;(define ejemplos (leer-ejemplos "ejemplos.scm"))
;(HTC ejemplos)